1.Brute approach
class Solution 
{ 
    public:
    int subarraySum(vector<int>& nums, int k) 
    { 
       int cnt=0;
       int n=nums.size();
       for(int i=0;i<n;i++)
       {
           for(int j=i;j<n;j++)
           {
               int sum=0;
               for(int k1=i;k1<=j;k1++)
                {
                 sum=sum+nums[k1];
                }
                if(sum==k)
                {
                  cnt++;
                }
            }
      }   
       return cnt;
    } 
};

2.Better approach
class Solution 
{ 
    public:
    int subarraySum(vector<int>& nums, int k) 
    { 
       int cnt=0;
       int n=nums.size();
       for(int i=0;i<n;i++)
       {
            int sum=0;
           for(int j=i;j<n;j++)
           {
               sum=sum+nums[j];
                if(sum==k)
                {
                  cnt++;
                }
            }
      }   
       return cnt;
    } 
};


3.Optimal approach

class Solution 
{ 
    public:
    int subarraySum(vector<int>& nums , int k) 
    { 
        int n=nums.size();
       int pre_sum=0;
       map<int,int> mp;
       int cnt=0;
       mp[0]=1;
       for(int i=0;i<n;i++)
       {
           pre_sum+=nums[i];
           int remove=pre_sum-k;
           cnt=cnt+mp[remove];
           mp[pre_sum]++;
       }
       return cnt;
    } 
};
