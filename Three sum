1. Brute approach
class Solution 
{
public:
    vector<vector<int>> threeSum(vector<int>& nums) 
    {
        set<vector<int>>st;
        vector<int>ans;
       for(int i=0;i<nums.size();i++)
       {
           for(int j=i+1;j<nums.size();j++)
           {
               for(int k=j+1 ; k<nums.size() ; k++)
               {
                   if(nums[i]+nums[j]+nums[k]==0)
                   {
                      ans = {nums[i] , nums[j] , nums[k]};
                      sort(ans.begin() , ans.end());
                      st.insert(ans);
                   }
               }
           }
       }     
       vector<vector<int>>res(st.begin() , st.end());
       return res;
    }
};


2.Better approach
class Solution 
{
public:
    vector<vector<int>> threeSum(vector<int>& nums) 
    {
       set<vector<int>>st;
       vector<int>ans;
       for(int i=0;i<nums.size();i++)
       {
           set<int>hashset;
           for(int j=i+1;j<nums.size();j++)
           {
               int k=-(nums[i]+nums[j]);
               if(hashset.find(k)!=hashset.end())
               {
                   vector<int>temp={nums[i] , nums[j] , k};
                   sort(temp.begin() , temp.end());
                   st.insert(temp);
               }
               hashset.insert(nums[j]);
           }
       }     
       vector<vector<int>>res(st.begin() , st.end());
       return res;
    }
};

3.Optimal approach

class Solution 
{
public:
    vector<vector<int>> threeSum(vector<int>& nums) 
    {
       int n = nums.size();
       vector<vector<int>> res;
       sort(nums.begin() , nums.end());
       for(int i=0;i<n;i++)
       {
           if(i!=0 && nums[i-1]==nums[i]) continue;
           int j=i+1;
           int k=n-1;
           while(j<k)
           {
               int sums=nums[i]+nums[j]+nums[k];
               if(sums<0)
               {
                   j++;
               }
               else if(sums>0)
               {
                   k--;
               }
               else
               {
                   vector<int>temp = {nums[i], nums[j],nums[k]};
                   res.push_back(temp);
                   j++;
                   k--;
                   while(j<k && nums[j-1]==nums[j]) j++;
                   while(j<k && nums[k]==nums[k+1]) k--;
               }
           }
       }
       return res;
    }
};
