1.BRUTE FORCE (using a set)

#include <bits/stdc++.h>

vector < int > sortedArray(vector < int > a, vector < int > b) 
{
    vector <int> arr;
    int n=a.size();
    int m=b.size();
    set <int> st;
    for(int i=0;i<n;i++)
    {
        st.insert(a[i]);
    }
    for(int i=0;i<m;i++)
    {
        st.insert(b[i]);
    }
    vector<int>res;
    for(auto it:st)
    {
       res.push_back(it);
    }
    return res;
}

2.OPTIMAL APPROACH (USING TWO POINTER APPROACH)

#include <bits/stdc++.h>

vector < int > sortedArray(vector < int > a, vector < int > b) 
{
    int n1=a.size();
    int n2=b.size();
    vector <int> res;
    int i=0;
    int j=0;
    while(i<n1 && j<n2)
    {
        if(a[i]<=b[j])
        {
            if(res.size()==0 || res.back()!=a[i])
            {
                res.push_back(a[i]);
            }
            i++;
        }
        else
        {
            if(res.size()==0 || res.back()!=b[i])
            {
                res.push_back(b[i]);
            }
            j++;
        }
    }
    while(j<n2)
    {
            if(res.size()==0 || res.back()!=b[i])
            {
                res.push_back(b[i]);
            }
            j++;
    }
    while(i<n1)
    {
            if(res.size()==0 || res.back()!=a[i])
            {
                res.push_back(a[i]);
            }
            i++;
    }
    return res;
}
