1.BRUTE FORCE APPROACH(USING 2 LOOPS)

class Solution 
{
public:
    vector <int> twoSum (vector<int>& nums, int target) 
    {
        vector <int> res;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(nums[i]+nums[j]==target)
                {
                    res.push_back(i);
                    res.push_back(j);
                }
            }
        }
        return res;
    }
};


2.Better approach(Using hashing)

vector<int> twoSum(int n, vector<int> &arr, int target) 
{
    unordered_map<int, int> mpp;
    for (int i = 0; i < n; i++) 
     {
        int num = arr[i];
        int moreNeeded = target - num;
        if (mpp.find(moreNeeded) != mpp.end()) 
        {
            return {mpp[moreNeeded], i};
        }
        mpp[num] = i;
    }
    return { -1, -1};
}



3.OPTIMAL APPROACH(2-pointers)

class Solution 
{
public:
    vector<vector<int>> threeSum(vector<int>& nums) 
    {
       int n = nums.size();
       vector<vector<int>> res;
       sort(nums.begin() , nums.end());
       for(int i=0;i<n;i++)
       {
           if(i!=0 && nums[i-1]==nums[i]) continue;
           int j=i+1;
           int k=n-1;
           while(j<k)
           {
               int sums=nums[i]+nums[j]+nums[k];
               if(sums<0)
               {
                   j++;
               }
               else if(sums>0)
               {
                   k--;
               }
               else
               {
                   vector<int>temp = {nums[i], nums[j],nums[k]};
                   res.push_back(temp);
                   j++;
                   k--;
                   while(j<k && nums[j-1]==nums[j]) j++;
                   while(j<k && nums[k]==nums[k+1]) k--;
               }
           }
       }
       return res;
    }
};
