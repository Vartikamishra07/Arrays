1.BRUTE FORCE APPROACH(USING 2 LOOPS)

class Solution 
{
public:
    vector <int> twoSum (vector<int>& nums, int target) 
    {
        vector <int> res;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(nums[i]+nums[j]==target)
                {
                    res.push_back(i);
                    res.push_back(j);
                }
            }
        }
        return res;
    }
};


2.Better approach(Using hashing)
vector<int> twoSum(int n, vector<int> &arr, int target) 
{
    unordered_map<int, int> mpp;
    for (int i = 0; i < n; i++) 
     {
        int num = arr[i];
        int moreNeeded = target - num;
        if (mpp.find(moreNeeded) != mpp.end()) 
        {
            return {mpp[moreNeeded], i};
        }
        mpp[num] = i;
    }
    return { -1, -1};
}



3.OPTIMAL APPROACH(2-pointers)

#include <bits/stdc++.h>

class Solution 
{
public:
    vector <int> twoSum (vector<int>& nums, int target) 
    {
        int n=nums.size();
        vector <int> res;
        int left=nums[0];
        int right=nums[n-1];
        sort(nums.begin(),nums.end());
        while(left<right)
        {
            int sum=nums[left]+nums[right];
            if(sum==target)
            {
                res.push_back(left);
                res.push_back(right);
                return res;
            }
            else if(sum<target)
            {
                left++;
            }
            else
            {
                right--;
            }
        }
        return res;
    }
};
