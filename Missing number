1. Brute force(using 2-pointer method)

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        int i = 0;
        for(int j = 0;j<n;j++){
            if(nums[j]!=i){
                return i;
            }
            i++;
        }
        return n;
    }
};


2.Brute force (Using a flag variable)
#include <vector>

class Solution {
public:
    int missingNumber(std::vector<int>& nums) {
        int N = nums.size();

        // Outer loop that runs from 0 to N (inclusive):
        for (int i = 0; i <= N; i++) {

            // flag variable to check if an element exists
            int flag = 0;

            // Search the element using linear search:
            for (int j = 0; j < N; j++) {
                if (nums[j] == i) {

                    // i is present in the array:
                    flag = 1;
                    break;
                }
            }

            // Check if the element is missing (flag == 0):
            if (flag == 0) return i;
        }

        // The following line will never execute.
        // It is just to avoid warnings.
        return -1;
    }
};


3. Better approach(Using hash map)

#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int N = nums.size();
        int hash[N + 1]; // hash array
        for (int i = 0; i <= N; i++) {
            hash[i] = 0;
        }

        // storing the frequencies:
        for (int i = 0; i < N; i++) {
            hash[nums[i]]++;
        }

        // checking the frequencies for numbers 0 to N:
        for (int i = 0; i <= N; i++) {
            if (hash[i] == 0) {
                return i;
            }
        }

        // The following line will never execute.
        // It is just to avoid warnings.
        return -1;
    }
};


4. Optimized solution(using 1 loop)

class Solution 
{
public:
    int missingNumber(vector<int>& nums) 
    {
       int n=nums.size();
       int sum=n*(n+1)/2;
       int a_sum=0;
       for(int i=0;i<n;i++)
       {
           a_sum=a_sum+nums[i];
       }
       return sum-a_sum;
    }
};
