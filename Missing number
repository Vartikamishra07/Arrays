1. Brute force(using Linear method)

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        int i = 0;
        for(int j = 0;j<n;j++){
            if(nums[j]!=i){
                return i;
            }
            i++;
        }
        return n;
    }
};

2. Better approach(Using hash map)

#include <bits/stdc++.h>
using namespace std;

int missingNumber(vector<int>&a, int N) {

    int hash[N + 1] = {0}; //hash array

    // storing the frequencies:
    for (int i = 0; i < N - 1; i++)
        hash[a[i]]++;

    //checking the freqencies for numbers 1 to N:
    for (int i = 1; i <= N; i++) {
        if (hash[i] == 0) {
            return i;
        }
    }

    // The following line will never execute.
    // It is just to avoid warnings.
    return -1;
}

3. Optimized solution(using 1 loop)

class Solution 
{
public:
    int missingNumber(vector<int>& nums) 
    {
       int n=nums.size();
       int sum=n*(n+1)/2;
       int a_sum=0;
       for(int i=0;i<n;i++)
       {
           a_sum=a_sum+nums[i];
       }
       return sum-a_sum;
    }
};
