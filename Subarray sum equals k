1.Brute approach
class Solution 
{ 
    public:
    int subarraySum(vector<int>& nums, int k) 
    { 
       int cnt=0;
       int n=nums.size();
       for(int i=0;i<n;i++)
       {
           for(int j=i;j<n;j++)
           {
               int sum=0;
               for(int k1=i;k1<=j;k1++)
                {
                 sum=sum+nums[k1];
                }
                if(sum==k)
                {
                  cnt++;
                }
            }
      }   
       return cnt;
    } 
};

2.Better approach
class Solution 
{ 
    public:
    int subarraySum(vector<int>& nums, int k) 
    { 
       int cnt=0;
       int n=nums.size();
       for(int i=0;i<n;i++)
       {
            int sum=0;
           for(int j=i;j<n;j++)
           {
               sum=sum+nums[j];
                if(sum==k)
                {
                  cnt++;
                }
            }
      }   
       return cnt;
    } 
};


3.Optimal approach
class Solution { 
    public: int subarraySum(vector<int>& nums, int k) 
    { 
        unordered_map<int,int>mp; 
        int sum=0; 
        int ans=0; 
        mp[sum]=1;
        for(auto it:nums) 
        { 
            sum=sum+it; 
        int fin=sum-k; 
        if(mp.find(fin)!=mp.end()) 
        { 
            ans=ans+mp[fin]; 
        } 
          mp[sum]++;
        
         } 
         return ans; 
     } 
    };
