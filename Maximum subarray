
1.BRUTE FORCE APPROACH (USING 3 FOR LOOPS)
class Solution 
{
public:
    int maxSubArray(vector<int>& nums) 
    {
        int maxi = INT_MIN;
    for(int i=0;i<nums.size();i++)
    {
        for(int j=i;j<nums.size();j++)
        {
            int sum=0;
            for(int k=i;k<=j;k++)
            {
                sum=sum+nums[k];
            }
            maxi=max(maxi,sum);
        }
    }
    return maxi;
    }
};


2. BETTER APPROACH (USING TWO FOR LOOPS )

class Solution 
{
public:
    int maxSubArray(vector<int>& nums) 
    {
     int maxi = INT_MIN;
    for(int i=0;i<nums.size();i++)
    {
        int sum=0;
        for(int j=i;j<nums.size();j++)
        {
           sum=sum+nums[j];
           maxi=max(maxi,sum);
        }
    }
    return maxi;
    }
};


3.Optimized approach (KADANE ALGORITHM)

class Solution 
{
public:
    int maxSubArray(vector<int>& nums) 
    {
        int sum=0;
        int maxi=INT_MIN;
        for(int i=0;i<nums.size();i++)
        {
            sum=sum+nums[i];
            if(sum>maxi)
            {
                maxi=sum;
            }
            if(sum<0)
            {
                sum=0;
            }
        }
        return maxi;
    }
};
