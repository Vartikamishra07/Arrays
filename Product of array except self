1. Brute approach

#include<iostream>
#include<vector>
using namespace std;

class Solution 
{
public:
    vector<int> productExceptSelf(vector<int>& nums) 
    {
       vector<int>res;
       int pro;
       for(int i=0;i<nums.size();i++)
       {
          pro=1;
          for(int j=0;j<nums.size();j++)
          {
            if(j!=i)
            {
                pro=pro*nums[j];
            }
          }
           res.push_back(pro);
       }    
       return res;
    }
};

int main()
{
    Solution s;
    vector<int> a = {1, 2, 3, 4};
    vector<int> result;
    result = s.productExceptSelf(a);
    for (int i = 0; i < result.size(); ++i) {
        cout << result[i] << " ";
    }
    return 0;
}

2.Better approach

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n);
        int pro = 1;
        for(int i : nums) {
            pro *= i;
        }
        
        for(int i = 0; i < n; i++) {
            ans[i] = pro / nums[i];
        }
        return ans;
    }
};

3.Optimal approach
