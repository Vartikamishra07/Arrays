1.Optimal approach
class Solution 
{
public:
    int minOperations(vector<int>& nums, int k) 
    {
      priority_queue<long long , vector<long long> ,greater<long long>>pq; //by default priority queue implements max heap means it willl sort elements in descending order
                                                                            //here we are using comparator greater<long long> due to which elements will be sorted in
                                                                           //ascending order or min heap is implemented
      int count=0;
      for(auto i:nums)
      {
          pq.push(i);
      }
      while(!pq.empty() && pq.top()<k)
      {
          long min = pq.top();
          pq.pop();
          long second_min=pq.top();
          pq.pop();
          long res=min*2+second_min;
          pq.push(res);
          count++;
      }
      return count;
    }
};

2.Brute approach
class Solution 
{
public:
    int minOperations(vector<int>& nums, int k) 
    {
      int count=0;
      long  n=nums.size();
      for(int i=0;i<n;i++)
      {
          if(nums[i]<k)
          {
             count++;
             sort(nums.begin() , nums.end());
             long x=nums[0];
             long y=nums[1];
             long new_ele=min(x,y)*2 +max(x,y);
             for (int i = 2; i < n; ++i) 
             {
                nums[i - 2] = nums[i];
             }
             n -= 2;
             nums[n]=new_ele;
             n++;
             i--;
         } 
      }
      return count;
    }
};
