1.Brute approach
class Solution 
{
  public:
    vector<int> rearrangeArray(vector<int>& nums) 
    {
       vector<int>res;
       vector<int>n_res;
       int n=nums.size();
       for(int i=0;i<nums.size();i++)
       {
          if(nums[i]>0)
          {
              res.push_back(nums[i]);
          } 
       } 
       for(int i=0;i<nums.size();i++)
       {
           if(nums[i]<0)
           {
               res.push_back(nums[i]);
           }
       }
       int j=n/2;
       for(int i=0;i<n/2;i++)
       {
           n_res.push_back(res[i]);
           n_res.push_back(res[j]);
           j++;
       }
       return n_res;
    }
};


2.Better approach

Using while loop:
class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) {
        vector<int>v1,v2,ans;
        
        for(int i =0;i<nums.size();i++){
            if(nums[i]>0)v1.push_back(nums[i]);
            else v2.push_back(nums[i]);
        }
        int ind1=0,ind2=0;
        while(ind2<nums.size()/2){
            ans.push_back(v1[ind1]);
            ind1++;
            ans.push_back(v2[ind2]);
            ind2++;
        }
        return ans;
    }
};

Using for loop:
 vector<int> RearrangebySign(vector<int>A, int n){
    
  // Define 2 vectors, one for storing positive 
  // and other for negative elements of the array.
  vector<int> pos;
  vector<int> neg;
  
  // Segregate the array into positives and negatives.
  for(int i=0;i<n;i++){
      
      if(A[i]>0) pos.push_back(A[i]);
      else neg.push_back(A[i]);
  }
  
  // Positives on even indices, negatives on odd.
  for(int i=0;i<n/2;i++){
      
      A[2*i] = pos[i];
      A[2*i+1] = neg[i];
  }
  return A;
}


3.Optimised approach(2 pointer)

class Solution 
{
public:
    vector<int> rearrangeArray(vector<int>& nums) 
    {
      int n=nums.size();
      vector<int>res(n,0);
      int pos=0;
      int neg=1;
      for(int i=0;i<n;i++)
      {
          if(nums[i]>0)
          {
              res[pos]=nums[i];
              pos=pos+2;
          }
          else
          {
              res[neg]=nums[i];
              neg=neg+2;
          }
      }
      return res;
    }
};


