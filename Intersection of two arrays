1.Brute approach
class Solution 
{
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) 
    {
      vector<int>ans;
      sort(nums1.begin() , nums1.end());
      sort(nums2.begin() , nums2.end());
      int m=nums1.size();
      int n=nums2.size();
      int i=0;
      int j=0;
      while(i<m && j<n)
      {
          if(nums1[i]==nums2[j])
          {
               ans.push_back(nums1[i]);
               i++;
               j++;
               while(i<m && nums1[i]==nums1[i-1])
               {
                 i++;
               }
              while(j<n && nums2[j]==nums2[j-1])
              {
                 j++;
              } 
          }
          else if(nums1[i]<nums2[j])
          {
              i++;
          }
          else
          {
              j++;
          }
      }   
      return ans;
    }
};


2.Optimal approach(using hashmap)
class Solution 
{
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) 
    {
      vector<int>ans;
      int m=nums2.size();
      unordered_map<int,int>mp;
      for(auto it:nums1)
      { 
         mp[it]++;
      }
      for(auto it:nums2)
      {
          if(mp.find(it)!=mp.end())
          {
              ans.push_back(it);
              mp.erase(it);
          }
      }
      return ans;
    }
};
