1.Brute force (Linear search on whole matrix)

#include <bits/stdc++.h>

class Solution 
{
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) 
    {
        int m = matrix.size();
        int n = matrix[0].size();
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(matrix[i][j]==target)
                {
                    return true;
                }
            }
        }
        return false;
    }
};

2. Better approach (Binary search on row containing target element)

#include <bits/stdc++.h>

class Solution 
{
public:
    bool BinarySearch(vector <int>& nums , int target)
    {
        int n=nums.size();
        int low=0;
        int high=n-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(nums[mid]==target)
            {
                return true;
            }
            else if(target<nums[mid])
            {
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
       return false;
    }

    bool searchMatrix(vector<vector<int>>& matrix, int target) 
    {
        int m = matrix.size();
        int n=matrix[0].size();
        for(int i=0;i<m;i++)
        {
            if(target>=matrix[i][0] && target<=matrix[i][n-1])
            {
                return BinarySearch(matrix[i] , target);
            }
        }
        return false;
    }
};


3. OPTIMAL APPROACH ( Flattening whole 2d matrix into 1d matrix and then applying Binary search on 1d array , but flattening is not done really!)

#include <bits/stdc++.h>

class Solution 
{
public:

    bool searchMatrix(vector<vector<int>>& matrix, int target) 
    {
        int m = matrix.size();
        int n=matrix[0].size();
        int low = 0;
        int high =(m*n)-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            int row=mid/n;
            int column=mid%n;
            if(matrix[row][column]==target)
            {
                return true;
            }
            else if(target<matrix[row][column])
            {
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return false;
    }
};






