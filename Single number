1.BRUTE FORCE APPROACH (using linear search)

class Solution 
{
public:
    int singleNumber(vector<int>& nums) 
    {
        int n=nums.size();
        
        for(int i=0;i<n;i++)
        {
            int num=nums[i];
            int count=0;
            for(int j=0;j<n;j++)
            {
                if(nums[j]==num)
                {
                    count++;
                }
            }
            if(count==1)
            {
                return num;
            }
        }
        return -1;
    }
};


2. BETTER APPRAOCH(USING HAShING an array)

class Solution 
{
public:
    int singleNumber(vector<int>& nums) 
    {
        int n=nums.size();
        int maxi=nums[0];
        for(int i=0;i<n;i++)
        {
            maxi=max(maxi,nums[i]);
        }
        vector <int> hash(maxi+1,0);
        for(int i=0;i<n;i++)
        {
            hash[nums[i]]++;
        }
        for(int i=0;i<n;i++)
        {
            if(hash[nums[i]]==1)
            {
                return nums[i];
            }
        }
        return -1;
    }
};

3.BETTER APPROACH 2(USING HASHing a map data structure)

class Solution 
{
public:
    int singleNumber(vector<int>& nums) 
    {
        int n=nums.size();
        map <int,int> mpp;
        for(int i=0;i<n;i++)
        {
            mpp[nums[i]]++;
        }
        for(auto it:mpp)
        {
            if(it.second==1)
            {
                return it.first;
            }
        }
        return -1;
    }
};



